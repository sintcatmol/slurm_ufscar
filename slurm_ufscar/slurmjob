#!/usr/bin/env python3

import configparser
import datetime
import argparse
import os

config = configparser.ConfigParser()
config_file = os.path.join(os.environ['HOME'], '.slurmjobrc')
try:
    with open(config_file) as f:
        config.read_file(f)
except FileNotFoundError:
    print('Configuration file not found. Exiting now')
    exit()

parser = argparse.ArgumentParser()
parser.add_argument("-software", "-s", choices=['xtb','crest','gaussian','orca'], required=True)
parser.add_argument("-jobs", "-j", nargs='+', required=True, help='Input file for the requested program')
parser.add_argument("--input", required=False, help="Custom input file. Usually employed for XTB calculations")
parser.add_argument("-cores", "-c", type=int, required=True, help='Number of cores')
parser.add_argument("-mem", "-m", type=int, required=True, help='Memory in MB per core required')
parser.add_argument("-time", "-t", type=float, required=True, help='Maximum running time in hours')
parser.add_argument("-flags", nargs='+', default='', help='Flags for xtb or crest')
arguments = parser.parse_args()

duration = datetime.timedelta(hours=arguments.time)
totsec = duration.total_seconds()
h = totsec//3600
m = (totsec%3600) // 60
sec =(totsec%3600)%60 #just for reference
walltime = f"{int(h):02d}:{int(m):02d}:{int(sec):02d}"

SLURM_OUTPUT_FILE = 'slurm_"$SLURM_JOB_ID".log'

def write_submission_script(*args):
    job_file = open(f"slurmjob_{JOB_BASENAME}.sh", mode='w')
    job_file.write('#!/bin/bash\n')

    # QUEUE SYSTEM SETTINGS
    if config['DEFAULT']['queue engine'] == 'slurm':
        QUEUE_JOB_ID = "$SLURM_JOB_ID"
        job_file.write(
            f'#SBATCH --job-name={JOB_BASENAME}\n'
            f'#SBATCH --output=slurm_%A_%x.log\n'
            '#SBATCH --nodes=1\n'
            f'#SBATCH --ntasks={arguments.cores}\n'
            '#SBATCH --cpus-per-task=1\n'
            f'#SBATCH --mem-per-cpu={arguments.mem}\n'
            '\n'
        )
    elif config['DEFAULT']['queue engine'] == 'PBS-Pro':
        QUEUE_JOB_ID = "$PBS_JOBID"
        job_file.write(
            f'#PBS -N {JOB_BASENAME}\n'
            f'#PBS -o {JOB_BASENAME}.stdout\n'
            f'#PBS -e {JOB_BASENAME}.stderr\n'
            f'#PBS -l select=1:ncpus={arguments.cores}:mem={arguments.cores*arguments.mem}mb\n'
            f'#PBS -l walltime={walltime}\n'
            '\n'
        )
    else:
        raise NotImplementedError(f"QUEUE System {config['DEFAULT']['queue engine']} is not implemented")

    # JOB SETTINGS
    JOB_SCRDIR = f"{config['DEFAULT']['scratch dir']}\"$USER\"/\"{QUEUE_JOB_ID}\""

    job_file.write(
        f'job_input="{JOB_BASENAME}.{JOB_INPUT_EXTENSION}"\n'
        f'job_submit_dir="{JOB_SUBMIT_DIR}"\n'
        '\n'
        f'job_local_dir=""$job_submit_dir"/{JOB_BASENAME}"\n'
        'mkdir -p $job_local_dir\n'
        '\n'
        f'job_scratch_dir="{JOB_SCRDIR}"\n'
        'mkdir -p $job_scratch_dir\n'
        '\n'
        f'cp "$job_submit_dir"/"$job_input" "$job_local_dir"\n'
        f'cp "$job_submit_dir"/"$job_input" "$job_scratch_dir"\n'
        '\n'
    )

    # SOFTWARE SETTINGS
    JOB_FLAGS = arguments.flags
    if arguments.input:
        CUSTOM_INPUT = os.path.basename(arguments.input)
        job_file.write(
            f'# Custom input file requested\n'
            f'cp {arguments.input} "$job_local_dir"\n'
            f'cp {arguments.input} "$job_scratch_dir"\n'
            '\n'
        )
        if isinstance(JOB_FLAGS, list):
            JOB_FLAGS.append(f"--input {CUSTOM_INPUT}")
    
    write_software_specific_settings(job_file, JOB_SCRDIR, arguments.software, flags=JOB_FLAGS)

    # DELETE SCRATCH DIR
    job_file.write(
        'function clean_job() {\n'
        '    echo "Removing jobdir from the working directory"\n'
        '    rm -rf "$job_scratch_dir"\n'
        '    echo "Done"\n'
        '}\n'
        '\n'
        'trap clean_job EXIT HUP INT TERM ERR\n'
        '\n'
    )
    job_file.close()

def write_software_specific_settings(job_file, job_scrdir, software, flags=None):
    if software == 'orca':
        SOFTWARE_EXEDIR = f"\"{config['executables']['orca5']}\""
        SOFTWARE_SCRDIR = f'\""$job_scratch_dir"/scr\"'
        # ORCA SETTINGS
        job_file.write(
            f'export ORCA_EXEDIR={SOFTWARE_EXEDIR}\n'
            f'export ORCA_SCRDIR={SOFTWARE_SCRDIR}\n'
            f'mkdir $ORCA_SCRDIR\n'
            'export LD_LIBRARY_PATH="$ORCA_EXEDIR":"$LD_LIBRARY_PATH"\n'
            'export PATH="$PATH":"$ORCA_EXEDIR"\n'
            '\n'
        )
        # RUN JOB
        job_file.write(
            f'"$ORCA_EXEDIR"/orca "$job_scratch_dir"/"$job_input" > "$job_local_dir"/{JOB_BASENAME}.out\n'
            '\n'
        )
        # COPY OUTPUTS FROM SCR TO LOCAL
        job_file.write(
            'cp "$job_scratch_dir"/* "$job_local_dir"/\n'
            '\n'
        )
    elif software == 'gaussian':
        SOFTWARE_EXEDIR = f"\"{config['executables']['gaussian16']}\""
        SOFTWARE_SCRDIR = f'\""$job_scratch_dir"/scr\"'
        XTBHOME=f"\"{config['executables']['xtb']}\""
        # GAUSSIAN16 SETTINGS
        job_file.write(
            f'export GAUSS_EXEDIR={SOFTWARE_EXEDIR}\n'
            'export PATH="$PATH":"$GAUSS_EXEDIR"\n'
            f'export GAUSS_SCRDIR={SOFTWARE_SCRDIR}\n'
            'mkdir $GAUSS_SCRDIR\n'
            '\n'
        )
        # XTB SETTINGS FOR GAUSSIAN-XTB INTERFACE
        job_file.write(
            f'export MKL_NUM_THREADS={arguments.cores}\n'
            f'export OMP_NUM_THREADS={arguments.cores}\n'
            f'export XTBHOME={XTBHOME}\n'
            'source "$XTBHOME"/share/xtb/config_env.bash\n'
            '\n'
        )
        # ADJUST GAUSSIAN CHECKPOINT OUTPUT FILE 
        job_file.write(
            f'sed -i \"s#%chk=#%chk=$job_scratch_dir/#g\" "$job_scratch_dir"/"$job_input"\n' 
            '\n'
        )
        # RUN JOB
        job_file.write(
            f'"$GAUSS_EXEDIR"/g16 < "$job_scratch_dir"/"$job_input" > "$job_local_dir"/{JOB_BASENAME}.log\n'
            '\n'
        )
        # COPY OUTPUTS FROM SCR TO LOCAL
        job_file.write(
            'cp "$job_scratch_dir"/* "$job_local_dir"/\n'
            '\n'
        )     
    elif software == 'xtb':
        SOFTWARE_EXEDIR = f"\"{config['executables']['xtb']}\""
        SOFTWARE_SCRDIR = f"{job_scrdir}/scr"
        # XTB SETTINGS
        job_file.write(
            f'export MKL_NUM_THREADS={arguments.cores}\n'
            f'export OMP_NUM_THREADS={arguments.cores}\n'
            f'export XTBHOME={SOFTWARE_EXEDIR}\n'
            'source "$XTBHOME"/share/xtb/config_env.bash\n'
            '\n'
        )
        #RUN JOB
        job_file.write(
            f'cd $job_scratch_dir\n'
            f'"$XTBHOME"/bin/xtb "$job_scratch_dir"/"$job_input" {" ".join(flags)} &> "$job_local_dir"/xtb.output\n'
            '\n'
        )
        # COPY OUTPUTS FROM SCR TO LOCAL
        job_file.write(
            'mv "$job_scratch_dir"/* "$job_local_dir"/\n'
            '\n'
        )
    elif software == 'crest':
        XTBHOME=f"\"{config['executables']['xtb']}\""
        SOFTWARE_EXEDIR = f"\"{config['executables']['crest']}\""
        SOFTWARE_SCRDIR = f"{job_scrdir}/scr"
        # CREST SETTINGS
        job_file.write(
            f'export MKL_NUM_THREADS={arguments.cores}\n'
            f'export OMP_NUM_THREADS={arguments.cores}\n'
            f'export XTBHOME={XTBHOME}\n'
            'source "$XTBHOME"/share/xtb/config_env.bash\n'
            f'export CREST_EXEDIR={SOFTWARE_EXEDIR}'
            '\n'
        )
        #RUN JOB
        job_file.write(
            f'cd $job_scratch_dir\n'
            f'"$CREST_EXEDIR"/crest "$job_scratch_dir"/"$job_input" {" ".join(flags)} &> "$job_local_dir"/crest.output\n'
            '\n'
        )
        # COPY OUTPUTS FROM SCR TO LOCAL
        job_file.write(
            'mv "$job_scratch_dir"/* "$job_local_dir"/\n'
            '\n'
        )
    else:
        raise NotImplementedError(f"Software {software} is not implemented yet")

for job in arguments.jobs:
    if os.path.isfile(job):
        JOB_BASENAME, JOB_INPUT_EXTENSION = job.split('.',1)
        JOB_SUBMIT_DIR = os.getcwd()
        JOB_LOCALDIR = os.path.join(JOB_SUBMIT_DIR, JOB_BASENAME)
        write_submission_script(job)
    else:
        raise OSError(f"Input file {job} not found")